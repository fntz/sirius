// Generated by CoffeeScript 1.9.2
"use strict";
var c = function(m){console.log(m);};;
var BottomController, LinkController, MainController, Renderer, Task, TodoController, TodoList, routes,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Task = (function(superClass) {
  extend(Task, superClass);

  Task.attrs = [
    "title", {
      completed: {
        completed: false
      }
    }, "id"
  ];

  function Task(obj) {
    if (obj == null) {
      obj = {};
    }
    Task.__super__.constructor.call(this, obj);
    this._id = "todo-" + (Math.random().toString(36).substring(7));
  }

  Task.prototype.is_active = function() {
    return !this.is_completed();
  };

  Task.prototype.is_completed = function() {
    return this.completed().completed;
  };

  Task.prototype.cancel = function() {
    return this.completed({
      completed: true
    });
  };

  Task.prototype.renew = function() {
    return this.completed({
      completed: false
    });
  };

  Task.prototype.after_update = function(attribute, newvalue, oldvalue) {
    if (attribute === "completed") {
      return Sirius.Application.get_adapter().and_then(function(adapter) {
        return adapter.fire(document, "collection:change");
      });
    }
  };

  Task.prototype.compare = function(other) {
    return other.id() === this.id();
  };

  Task.prototype.toString = function() {
    return "Todo[id=" + (this.id()) + ", title=" + (this.title()) + ", completed=" + (this.completed().completed) + "]";
  };

  return Task;

})(Sirius.BaseModel);

Renderer = {
  todo_template: new EJS({
    url: 'js/todo.ejs'
  }),
  view: new Sirius.View("#todo-list"),
  clear_view: new Sirius.View("#clear-completed", function(size) {
    return "Clear completed (" + size + ")";
  }),
  render: function(todo_list) {
    var i, len, results, todo;
    this.view.render().clear();
    results = [];
    for (i = 0, len = todo_list.length; i < len; i++) {
      todo = todo_list[i];
      results.push(this.append(todo));
    }
    return results;
  },
  append: function(todo) {
    var id, obj1, template, todo_view;
    template = this.todo_template.render({
      todo: todo
    });
    this.view.render(template).append();
    id = "li\#" + (todo.id());
    todo_view = new Sirius.View(id);
    todo.bind(todo_view, (
      obj1 = {},
      obj1["" + id] = {
        from: "completed",
        to: "class",
        transform: function(t) {
          if (t.completed) {
            return "completed";
          } else {
            return "";
          }
        }
      },
      obj1["input[type='checkbox']"] = {
        from: "completed",
        to: "checked"
      },
      obj1["label"] = {
        from: "title"
      },
      obj1
    ));
    todo_view.bind(todo, {
      ".view input": {
        from: "checked",
        to: "completed"
      },
      "input.edit": {
        to: "title"
      }
    });
    todo_view.on('div', 'dblclick', function(x) {
      return todo_view.render("editing").swap('class');
    });
  },
  clear: function(size) {
    if (size !== 0) {
      return this.clear_view.render(size).swap();
    } else {
      return this.clear_view.render().clear();
    }
  }
};

TodoList = new Sirius.Collection(Task);

TodoList.subscribe('add', function(todo) {
  return Renderer.append(todo);
});

TodoList.subscribe('remove', function(todo) {
  return $("\#" + (todo.id())).remove();
});

MainController = {
  root: function() {
    return Renderer.render(TodoList.all());
  },
  active: function() {
    return Renderer.render(TodoList.filter(function(t) {
      return t.is_active();
    }));
  },
  completed: function() {
    return Renderer.render(TodoList.filter(function(t) {
      return t.is_completed();
    }));
  },
  start: function() {
    var footer, length_view, model, view;
    view = new Sirius.View("#todoapp");
    model = new Task();
    view.bind(model, {
      "#new-todo": {
        to: "title"
      }
    });
    model.bind(view, {
      "#new-todo": {
        from: "title"
      }
    });
    view.on("#new-todo", "keypress", "todo:create", model);
    length_view = new Sirius.View("#todo-count strong");
    length_view.bind(TodoList, 'length');
    footer = new Sirius.View("#footer");
    footer.bind(TodoList, 'length', {
      to: 'class',
      transform: function(x) {
        if (x === 0) {
          return "hidden";
        } else {
          return "";
        }
      }
    });
    TodoList.add(new Task({
      title: "Create a TodoMVC template",
      completed: {
        completed: true
      }
    }));
    return TodoList.add(new Task({
      title: "Rule the web"
    }));
  }
};

TodoController = {
  is_enter: function(custom_event, original_event) {
    if (original_event.which === 13) {
      return true;
    }
    return false;
  },
  create: function(custom_event, original_event, model) {
    var todo;
    todo = new Task({
      title: model.title()
    });
    TodoList.add(todo);
    return model.title("");
  },
  mark_all: function(e, state) {
    if (state === 'completed') {
      TodoList.filter(function(t) {
        return t.is_completed();
      }).map(function(t) {
        return t.renew();
      });
    } else {
      TodoList.filter(function(t) {
        return t.is_active();
      }).map(function(t) {
        return t.cancel();
      });
    }
    return $("#toggle-all").toggleClass('completed');
  },
  destroy: function(e, id) {
    var todo;
    todo = TodoList.filter(function(t) {
      return t.id() === id;
    })[0];
    return TodoList.remove(todo);
  }
};

BottomController = {
  change: function(ev) {
    return Renderer.clear(TodoList.filter(function(t) {
      return t.is_completed();
    }).length);
  },
  clear: function() {
    TodoList.filter(function(t) {
      return t.is_completed();
    }).map(function(t) {
      return TodoList.remove(t);
    });
    return Renderer.clear(0);
  }
};

LinkController = {
  url: function(event, current, prev) {
    prev = prev === "" ? "/" : prev;
    document.querySelector("a[href='" + current + "']").className = "selected";
    return document.querySelector("a[href='" + prev + "']").className = "";
  }
};

routes = {
  "/": {
    controller: MainController,
    action: "root"
  },
  "/active": {
    controller: MainController,
    action: "active"
  },
  "/completed": {
    controller: MainController,
    action: "completed"
  },
  "application:run": {
    controller: MainController,
    action: "start"
  },
  "todo:create": {
    controller: TodoController,
    action: "create",
    guard: "is_enter"
  },
  "application:urlchange": {
    controller: LinkController,
    action: "url"
  },
  "click #toggle-all": {
    controller: TodoController,
    action: "mark_all",
    data: 'class'
  },
  "collection:change": {
    controller: BottomController,
    action: "change"
  },
  "click button.destroy": {
    controller: TodoController,
    action: "destroy",
    data: "data-id"
  },
  "click #clear-completed": {
    controller: BottomController,
    action: "clear"
  }
};

$(function() {
  return Sirius.Application.run({
    route: routes,
    adapter: new JQueryAdapter(),
    log: false,
    log_filters: [0]
  });
});
