// Generated by CoffeeScript 1.8.0
"use strict";
var BottomController, MainController, Renderer, Task, TodoController, TodoList, routes,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Task = (function(_super) {
  __extends(Task, _super);

  Task.attrs = [
    "title", {
      completed: false
    }, "id"
  ];

  function Task(obj) {
    if (obj == null) {
      obj = {};
    }
    Task.__super__.constructor.call(this, obj);
    this._id = "todo-" + (Math.random().toString(36).substring(7));
  }

  Task.prototype.is_active = function() {
    return !this.completed();
  };

  Task.prototype.is_completed = function() {
    return this.completed();
  };

  Task.prototype.after_update = function(attribute, newvalue, oldvalue) {
    if (attribute === "completed" || newvalue === true) {
      return Sirius.Application.get_adapter().and_then(function(adapter) {
        return adapter.fire(document, "collection:length");
      });
    }
  };

  Task.prototype.compare = function(other) {
    return other.id() === this.id();
  };

  return Task;

})(Sirius.BaseModel);

Renderer = {
  todo_template: new EJS({
    url: 'js/todo.ejs'
  }),
  view: new Sirius.View("#todo-list"),
  clear_view: new Sirius.View("#clear-completed", function(size) {
    return "Clear completed (" + size + ")";
  }),
  render: function(todo_list) {
    var todo, _i, _len, _results;
    this.view.render().clear();
    _results = [];
    for (_i = 0, _len = todo_list.length; _i < _len; _i++) {
      todo = todo_list[_i];
      _results.push(this.append(todo));
    }
    return _results;
  },
  append: function(todo) {
    var template, todo_view;
    template = this.todo_template.render({
      todo: todo
    });
    this.view.render(template).append();
    todo_view = new Sirius.View("li\#" + (todo.id()));
    todo.bind(todo_view, {
      transform: {
        mark_as_completed: function(t) {
          if (t) {
            return "completed";
          } else {
            return "";
          }
        }
      }
    });
    todo_view.bind(todo);
    todo_view.on('div', 'dblclick', function(x) {
      return todo_view.render("editing").swap('class');
    });
  },
  clear: function(size) {
    if (size !== 0) {
      return this.clear_view.render(size).swap();
    } else {
      return this.clear_view.render().clear();
    }
  }
};

TodoList = new Sirius.Collection(Task);

TodoList.subscribe('add', function(todo) {
  return Renderer.append(todo);
});

TodoList.subscribe('remove', function(todo) {
  return $("\#" + (todo.id())).remove();
});

MainController = {
  root: function() {
    return Renderer.render(TodoList.all());
  },
  active: function() {
    return Renderer.render(TodoList.filter(function(t) {
      return t.is_active();
    }));
  },
  completed: function() {
    return Renderer.render(TodoList.filter(function(t) {
      return t.is_completed();
    }));
  },
  start: function() {
    var footer, length_view, model, view;
    view = new Sirius.View("#todoapp");
    model = new Task();
    view.bind2(model);
    view.on("#new-todo", "keypress", "todo:create", model);
    length_view = new Sirius.View("#todo-count strong");
    length_view.bind(TodoList, 'length');
    footer = new Sirius.View("#footer");
    footer.bind(TodoList, 'length', {
      to: 'class',
      transform: function(x) {
        if (x === 0) {
          return "hidden";
        } else {
          return "";
        }
      }
    });
    TodoList.add(new Task({
      title: "Create a TodoMVC template",
      completed: true
    }));
    return TodoList.add(new Task({
      title: "Rule the web"
    }));
  }
};

TodoController = {
  is_enter: function(custom_event, original_event) {
    if (original_event.which === 13) {
      return true;
    }
    return false;
  },
  create: function(custom_event, original_event, model) {
    var todo;
    todo = new Task({
      title: model.title()
    });
    TodoList.add(todo);
    return model.title("");
  },
  mark_all: function(e, state) {
    if (state === 'completed') {
      TodoList.filter(function(t) {
        return t.is_completed();
      }).map(function(t) {
        return t.completed(false);
      });
    } else {
      TodoList.filter(function(t) {
        return t.is_active();
      }).map(function(t) {
        return t.completed(true);
      });
    }
    return $("#toggle-all").toggleClass('completed');
  },
  destroy: function(e, id) {
    var todo;
    todo = TodoList.filter(function(t) {
      return t.id() === id;
    })[0];
    return TodoList.remove(todo);
  }
};

BottomController = {
  change: function() {
    return Renderer.clear(TodoList.filter(function(t) {
      return t.is_completed();
    }).length);
  },
  clear: function() {
    TodoList.filter(function(t) {
      return t.is_completed();
    }).map(function(t) {
      return TodoList.remove(t);
    });
    return Renderer.clear(0);
  }
};

routes = {
  "/": {
    controller: MainController,
    action: "root"
  },
  "/active": {
    controller: MainController,
    action: "active"
  },
  "/completed": {
    controller: MainController,
    action: "completed"
  },
  "application:run": {
    controller: MainController,
    action: "start"
  },
  "todo:create": {
    controller: TodoController,
    action: "create",
    guard: "is_enter"
  },
  "click #toggle-all": {
    controller: TodoController,
    action: "mark_all",
    data: 'class'
  },
  "collection:length": {
    controller: BottomController,
    action: "change"
  },
  "click button.destroy": {
    controller: TodoController,
    action: "destroy",
    data: "data-id"
  },
  "click #clear-completed": {
    controller: BottomController,
    action: "clear"
  }
};

$(function() {
  return Sirius.Application.run({
    route: routes,
    adapter: new JQueryAdapter(),
    class_name_for_active_link: 'selected',
    log: false
  });
});
